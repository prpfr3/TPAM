from django.db import models
from django import forms
from notes.models import Post
import sys

sys.path.append("..")
from utils.utils import custom_slugify


class SlideHeader(models.Model):
    slug = models.SlugField(
        default=None,
        null=True,
        blank=True,
        max_length=255,
        unique=True,
        help_text="Enter a slug only if you wish to override that which will be autogenerated from the text headline.",
    )
    location_line = models.BooleanField(default=True)
    media_caption = models.CharField(max_length=100, blank=True, null=True)
    media_credit = models.CharField(max_length=200, blank=True, null=True)
    media_url = models.URLField(blank=True, null=True, max_length=300)
    text_headline = models.CharField(max_length=200, blank=True, null=True)
    post_fk = models.ForeignKey(
        Post, on_delete=models.SET_NULL, blank=True, null=True, default=None
    )
    type = models.CharField(default="overview", max_length=20)
    wikipedia_name = models.CharField(max_length=1000, blank=True, default="")

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = custom_slugify(self.text_headline).replace("-", "_")
        super().save(*args, **kwargs)

    def __str__(self):
        return self.text_headline


class TimelineSlideHeader(models.Model):
    slug = models.SlugField(
        default=None,
        null=True,
        blank=True,
        max_length=255,
        unique=True,
        help_text="Enter a slug only if you wish to override that which will be autogenerated from the text headline.",
    )
    media_caption = models.CharField(max_length=110, blank=True, default="")
    media_credit = models.CharField(max_length=200, blank=True, default="")
    media_url = models.URLField(null=True, blank=True, default="", max_length=300)
    text_headline = models.CharField(max_length=200, blank=True, null=True)
    text_text = models.TextField(blank=True, null=True)
    type = models.CharField(default="overview", max_length=20)
    wikipedia_name = models.CharField(max_length=1000, blank=True, default="")

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = custom_slugify(self.text_headline).replace("-", "_")
        super().save(*args, **kwargs)

    def __str__(self):
        return self.text_headline


class CarouselHeader(models.Model):
    slug = models.SlugField(
        default=None,
        null=True,
        blank=True,
        max_length=255,
        unique=True,
        help_text="Enter a slug only if you wish to override that which will be autogenerated from the text headline.",
    )
    media_caption = models.CharField(max_length=100, blank=True, null=True)
    media_credit = models.CharField(max_length=200, blank=True, null=True)
    media_url = models.URLField(blank=True, null=True, max_length=300)
    header_text = models.CharField(max_length=200, blank=True, null=True)
    post_reference = models.ForeignKey(
        Post, on_delete=models.SET_NULL, blank=True, null=True, default=None
    )
    wikipedia_reference = models.CharField(max_length=1000, blank=True, default="")

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = custom_slugify(self.header_text).replace("-", "_")
        super().save(*args, **kwargs)

    def __str__(self):
        return self.header_text


class Slide(models.Model):
    slideheader = models.ManyToManyField(
        SlideHeader, through="Slidepack", related_name="slidepack_slide"
    )
    timeline_slideheader = models.ManyToManyField(
        TimelineSlideHeader,
        through="TimelineSlidepack",
        related_name="timeline_slidepack_slide",
    )
    carousel_slideheader = models.ManyToManyField(
        CarouselHeader,
        through="Carouselpack",
        related_name="carousel_pack_slide",
    )
    background = models.URLField(blank=True, null=True, max_length=300)
    northing = models.FloatField(blank=True, null=True)
    easting = models.FloatField(blank=True, null=True)
    zoom = models.SmallIntegerField(default=12)
    media_caption = models.CharField(max_length=100, blank=True, null=True)
    media_credit = models.CharField(max_length=200, blank=True, null=True)
    media_url = models.URLField(blank=True, null=True, max_length=400)
    text_headline = models.CharField(max_length=200, blank=True, null=True)
    text_text = models.TextField(blank=True, null=True)
    post_fk = models.ForeignKey(
        Post, on_delete=models.SET_NULL, blank=True, null=True, default=None
    )
    wikipedia_name = models.CharField(max_length=1000, blank=True, default="")
    start_date = models.CharField(
        max_length=10,
        blank=True,
        default="",
        help_text="Format YYYY-MM-DD with only YY mandatory; Leading zeros on mmy and yy; Can use ? for any unknown digit",
    )
    end_date = models.CharField(
        max_length=10,
        blank=True,
        default="",
        help_text="Format YYYY-MM-DD with only YY mandatory; Leading zeros on mmy and yy; Can use ? for any unknown digit",
    )

    def __str__(self):
        return self.text_headline


class Slidepack(models.Model):
    slideheader_fk = models.ForeignKey(SlideHeader, on_delete=models.CASCADE)
    slide_fk = models.ForeignKey(Slide, on_delete=models.CASCADE)
    slide_order = models.SmallIntegerField()

    def __str__(self):
        return f"{self.slideheader_fk} Slide {self.slide_order} : {self.slide_fk}"


class TimelineSlidepack(models.Model):
    slideheader_fk = models.ForeignKey(TimelineSlideHeader, on_delete=models.CASCADE)
    slide = models.ForeignKey(Slide, on_delete=models.CASCADE, null=True)
    slide_order = models.SmallIntegerField()

    def __str__(self):
        return f"{self.slideheader_fk} Slide {self.slide_order} : {self.slide}"


class Carouselpack(models.Model):
    slideheader_fk = models.ForeignKey(CarouselHeader, on_delete=models.CASCADE)
    slide_fk = models.ForeignKey(Slide, on_delete=models.CASCADE)
    slide_order = models.SmallIntegerField()

    def __str__(self):
        return f"{self.slideheader_fk} Slide {self.slide_order} : {self.slide_fk}"
